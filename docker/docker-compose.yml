version: '3.8'

services:
  # FastAPI Backend
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: atlas-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ../logs:/app/logs
      - ../.env:/app/.env
    command: ["uvicorn", "api.app:app", "--host", "0.0.0.0", "--port", "8000"]
    networks:
      - atlas-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Telegram Bot
  bot:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: atlas-bot
    restart: unless-stopped
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ../logs:/app/logs
      - ../.env:/app/.env
    command: ["python", "bot/main.py"]
    networks:
      - atlas-network
    depends_on:
      api:
        condition: service_healthy

  # Optional: Redis for caching (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   container_name: atlas-redis
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - atlas-network

  # Optional: Nginx reverse proxy (uncomment if needed)
  # nginx:
  #   image: nginx:alpine
  #   container_name: atlas-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   networks:
  #     - atlas-network
  #   depends_on:
  #     - api

networks:
  atlas-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
